#!/usr/bin/env python3

# This file is part of the Python aiocoap library project.
#
# Copyright (c) 2012-2014 Maciej Wasilak <http://sixpinetrees.blogspot.com/>,
#               2013-2014 Christian Ams√ºss <c.amsuess@energyharvesting.at>
#
# aiocoap is free software, this file is published under the MIT license as
# described in the accompanying LICENSE file.

"""A client suitable for running the OSCOAP plug test series against a given
server

See https://github.com/EricssonResearch/OSCOAP for the test suite
description."""

import argparse
import asyncio

from aiocoap import *
from aiocoap import interfaces

from plugtest_common import *

class ProtectedRequester(interfaces.RequestProvider):
    """A RequestProvider that protectes requests using OSCOAP using a
    configured mapping between URIs and security contexts and sends it over the underlying_requester."""
    def __init__(self, underlying_requester):
        self._wire = underlying_requester
        self._prefixes = {}

    def set_uri_prefix_context(self, prefix, security_context):
        """Use the given security context for all URIs starting with the
        prefix"""
        self._prefixes[prefix] = security_context

    def request(self, request_message):
        uri = request_message.get_request_uri()
        for (prefix, context) in sorted(self._prefixes.items(), reverse=True):
            if uri.startswith(prefix):
                security_context = context
                break
        else:
            raise KeyError("No suitable security context found.")

        return self.Request(self._wire, security_context, request_message)

    class Request(interfaces.Request):
        def __init__(self, wire, security_context, request_message):
            if request_message.opt.observe is not None:
                self.observation = self.Observation(request_message)
            self._security_context = security_context

            self.response = self._initial(wire, request_message)

        @asyncio.coroutine
        def _initial(self, wire, request_message):
            protected, self._original_request_seqno = self._security_context.protect(request_message)
            # FIXME where should this be called from?
            self._security_context._store()

            wire_request =  wire.request(protected)

            # FIXME do we want to expose anything else of the request? what other
            # interfaces are there that are applicable?

            if request_message.opt.observe is not None:
                wire_request.observation.register_errback(self.observation.error)
                wire_request.observation.register_callback(self._observe_message)

                # FIXME something is weak too aggressively here -- proper solution
                # would probably be keeping references in callback recipients as
                # mandatory-to-keep callback removers (ie. the handle is not only
                # for removing one's callback again, but also to keep it alive)
                self.observation._wire_observation = wire_request.observation

            wire_response = yield from wire_request.response
            unprotected_response, _ = self._security_context.unprotect(wire_response, self._original_request_seqno)
            self._security_context._store()

            return unprotected_response

        def _observe_message(self, message):
            unprotected_message, _ = self._security_context.unprotect(message, self._original_request_seqno)
            self._security_context._store()
            self.observation.callback(unprotected_message)

        class Observation(protocol.ClientObservation):
            # using the inheritance mainly for the __aiter__ that's so nicely generated from register_{call,err}back
            def _register(self, *args):
                "This is an OSCOAP observation and doesn't register"
            def _unregister(self, *args):
                "This is an OSCOAP observation and doesn't unregister"


class PlugtestClientProgram:
    async def run(self):
        p = argparse.ArgumentParser("Client for the OSCOAP plug test..")
        p.add_argument("host", help="Hostname of the server")
        p.add_argument("testno", type=int, help="Test number to run (integer part)")
        p.add_argument("contextdir", nargs="?", help="Directory name where to persist sequence numbers")
        opts = p.parse_args()

        self.host = opts.host

        self.regular_context = get_security_context(opts.testno, 'client', opts.contextdir)

        self.ctx = await Context.create_client_context()
        self.protected_ctx = ProtectedRequester(self.ctx)
        self.protected_ctx.set_uri_prefix_context("coap://%s" % self.host, self.regular_context)

        await self.run_test(opts.testno)

    @classmethod
    def sync_run(cls):
        asyncio.get_event_loop().run_until_complete(cls().run())


    async def run_test(self, testno):
        self.testno = testno
        testfun = self.__methods[testno]
        await getattr(self, testfun)()

    __methods = {}
    def __implements_tests(numbers, __methods=__methods):
        def registerer(method):
            for n in numbers:
                __methods[n] = method.__name__
            return method
        return registerer

    @__implements_tests([0])
    async def test_plain(self):
        request = Message(code=GET, uri='coap://' + self.host + '/hello/coap')
        response = await self.ctx.request(request).response
        print("Response:", response)
        additional_verify("Responde had correct code", response.code, CONTENT)
        additional_verify("Responde had correct payload", response.payload, b"Hello World!")
        additional_verify("Options as expected", response.opt, Message(content_format=0).opt)

    @__implements_tests([1, 2, 3])
    async def test_hellotests(self):
        request = Message(code=GET, uri='coap://' + self.host+ '/hello/%d'%self.testno + ("?first=1" if self.testno == 2 else ""))
        expected = {'content_format': 0}
        if self.testno == 2:
            expected['etag'] = b"\x2b"
        if self.testno == 3:
            request.opt.accept = 0
            expected['max_age'] = 5
        unprotected_response = await self.protected_ctx.request(request).response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", unprotected_response.code, CONTENT)
        additional_verify("Options as expected", unprotected_response.opt, Message(**expected).opt)

    @__implements_tests([4])
    async def test_nonobservable(self):
        request = Message(code=GET, uri='coap://' + self.host + '/hello/1', observe=0)

        request = self.protected_ctx.request(request)

        unprotected_response = await request.response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", unprotected_response.code, CONTENT)
        additional_verify("Observe option is absent", unprotected_response.opt.observe, None)

        async for o in request.observation:
            print("Expectation failed: Observe events coming in.")

    @__implements_tests([5])
    async def test_observable(self):
        request = Message(code=GET, uri='coap://' + self.host + '/observe', observe=0)

        request = self.protected_ctx.request(request)

        unprotected_response = await request.response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", unprotected_response.code, CONTENT)
        additional_verify("Observe option present", unprotected_response.opt.observe is not None, True)

        async for o in request.observation:
            print("Verify: Received message", o, o.payload)

    @__implements_tests([6])
    async def test_post(self):
        request = Message(code=POST, uri='coap://' + self.host+ '/hello/6', payload=b"\x4a", content_format=0)
        unprotected_response = await self.protected_ctx.request(request).response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", CREATED, unprotected_response.code)
        additional_verify("Location-Path as expected", ('hello','6'), unprotected_response.opt.location_path)
        additional_verify("Location-Query as expected", ('first=1',), unprotected_response.opt.location_query)

    @__implements_tests([7])
    async def test_put_match(self):
        request = Message(code=PUT, uri='coap://' + self.host+ '/hello/7', payload=b"\x7a", content_format=0, if_match=[b"\x7b"])
        unprotected_response = await self.protected_ctx.request(request).response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", CHANGED, unprotected_response.code)
        additional_verify("Options empty as expected", Message().opt, unprotected_response.opt)

    @__implements_tests([8])
    async def test_put_nonmatch(self):
        request = Message(code=PUT, uri='coap://' + self.host+ '/hello/7', payload=b"\x8a", content_format=0, if_none_match=True)
        unprotected_response = await self.protected_ctx.request(request).response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", PRECONDITION_FAILED, unprotected_response.code)
        additional_verify("Options empty as expected", Message().opt, unprotected_response.opt)

    @__implements_tests([9])
    async def test_delete(self):
        request = Message(code=DELETE, uri='coap://' + self.host+ '/test')
        unprotected_response = await self.protected_ctx.request(request).response

        print("Unprotected response:", unprotected_response)
        additional_verify("Code as expected", DELETED, unprotected_response.code)
        additional_verify("Options empty as expected", Message().opt, unprotected_response.opt)

    @__implements_tests([10, 11])
    async def test_oscoaperror_server_reports_error(self):
        request = Message(code=GET, uri='coap://' + self.host + '/hello/1')

        if self.testno == 10:
            expected_code = UNAUTHORIZED
        elif self.testno == 11:
            expected_code = BAD_REQUEST

        try:
            unprotected_response = await self.protected_ctx.request(request).response
        except oscoap.NotAProtectedMessage as e:
            if e.plain_message.code == expected_code:
                print("Check passed: The server responded with unencrypted %s."%(expected_code))
            else:
                print("Failed: Server responded with something unencrypted, but not the expected code %s: %s"%(expected_code, e.plain_message))
        else:
            print("Failed: The validation passed.")
            print("Unprotected response:", unprotected_response)

    @__implements_tests([12])
    async def test_oscoaperror_failclientside(self):
        request = Message(code=GET, uri='coap://' + self.host + '/hello/1')

        try:
            unprotected_response = await self.protected_ctx.request(request).response
        except oscoap.ProtectionInvalid as e:
            print("Check passed: The validation failed. (%s)"%e)
        else:
            print("Failed: the validation passed.")
            print("Unprotected response:", unprotected_response)

    @__implements_tests([13])
    async def test_replay(self):
        request = Message(code=GET, uri='coap://' + self.host + '/hello/1')

        unprotected_response = await self.protected_ctx.request(request).response # make this _nonraising as soon as there's a proper context backend
        if unprotected_response.code != CONTENT:
            print("Failed: Request did not even pass before replay (%s)"%unprotected_response)
            return

        self.regular_context = get_security_context(self.testno, 'client')
        self.protected_ctx.set_uri_prefix_context("coap://%s" % self.host, self.regular_context)

        try:
            unprotected_response = await self.protected_ctx.request(request).response
        except oscoap.NotAProtectedMessage as e:
            if e.plain_message.code == BAD_REQUEST:
                print("Check passed: The server responded with unencrypted replay error.")
            else:
                print("Failed: Server responded with something unencrypted, but not the expected code %s: %s"%(expected_code, e.plain_message))
        else:
            print("Failed: the validation passed.")
            print("Unprotected response:", unprotected_response)

if __name__ == "__main__":
    PlugtestClientProgram.sync_run()
